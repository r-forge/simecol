.onLoad <- function(lib, pkg) require(methods)

useDynLib(simecol, .registration = TRUE)

importFrom(graphics, plot)

import(deSolve)

exportClasses(simObj, odeModel, gridModel, rwalkModel)
exportClasses(numericOrlist,listOrNULL,functionOrNULL,listOrdata.frame,functionOrcharacter)

exportMethods(sim, parms, "parms<-", init, "init<-", times, "times<-")
exportMethods(inputs, "inputs<-", main, "main<-", equations, "equations<-")
exportMethods(solver, "solver<-", out, "out<-")

exportMethods(plot, print)
exportMethods(show)
exportMethods(fixInit, fixParms, fixTimes)
exportMethods(initialize, initfunc, "initfunc<-")

exportMethods(coerce, as.list, as.simObj)

## generating functions
export(simObj, odeModel, gridModel, rwalkModel)

## utilities
export(addtoenv, fromtoby)
export(neighbours, neighbors, eightneighbours, eightneighbors, seedfill)
export(approxTime, approxTime1, sEdit, peaks)
export(iteration)
#export(euler, rk4, lsoda) # from deSolve

## parameter fitting
export(ssqOdeModel, fitOdeModel)
export(p.constrain, p.unconstrain)

## random number stuff
export(pcu, pcuseries, rho2alpha, alpha2rho)

## not necessary because example models are stored as *data*
# export(lv, lv3, conway, diffusion, upca) 

